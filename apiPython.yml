apiVersion: v1
kind: Namespace
metadata:
  name: python-space

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: api-test
data:
  server.py: |
    from flask import Flask
    import redis

    app = Flask(__name__)

    r = redis.Redis(host='redis-svc', port=6379, decode_responses=True)

    @app.route('/')
    def hello_world():
        return 'Hello World - but override'

    @app.route('/set/<data>')
    def set(data):
        r.set('rr',data )
        return 'Set Redis data {}'.format(data)

    @app.route('/get')
    def get():
        data = r.get('foo')
        return 'Get Redis data {}'.format(data)
    
    if __name__ == '__main__':
        app.run()
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: cp-redis-config 
data:
  redis-config: ''

---

apiVersion: v1
kind: Pod
metadata:
  name: redis
  labels:
    app: redis
spec:
  containers:
    - name: redis
      image: redis:latest
      command: 
        - redis-server
        - "/redis-master/redis.conf"
      env:
        - name: MASTER
          value: "true"
      ports:
        - containerPort: 6379
      resources:
        limits:
          cpu: "0.1"
      volumeMounts:
        - mountPath: /redis-master-data
          name: data
        - mountPath: /redis-master
          name: config
  volumes:
    - name: data
      emptyDir: {}
    - name: config
      configMap:
        name: cp-redis-config
        items:
          - key: redis-config
            path: redis.conf

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-deployment
  labels:
    app: python
spec:
  replicas: 2
  selector:
    matchLabels:
      app: python
  template:
    metadata:
      labels:
        app: python
    spec:
      containers:
      - name: python
        image: mg231223/testciself-hosted:latest
        volumeMounts:
        - name: api-test
          mountPath: "/app"
          readOnly: true
        ports:
        - containerPort: 5000
      volumes:
      - name: api-test
        configMap:
          name: api-test


---
kind: Service
apiVersion: v1
metadata:
  name: api-test-service
spec:
  selector:
    app: python
  ports:
    - port: 5000 
---
kind: Service
apiVersion: v1
metadata:
  name: redis-svc
spec:
  selector:
    app: redis
  ports:
    - port: 6379 
---


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-test-service-ingress
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    ingress.class: "haproxy"
spec:
  rules:
  - host: pyapi.autok8s.xyz
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: api-test-service
              port:
                number: 5000
