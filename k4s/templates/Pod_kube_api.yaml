# apiVersion: v1
# kind: Pod
# metadata:
#   annotations:
#     kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 127.0.0.1:6443
#   labels:
#     component: {{ .Values.ID }}-kube-apiserver
#   name: {{ .Values.ID }}-kube-apiserver
# spec:
#   containers:
#   - name: {{ .Values.ID }}-kube-apiserver
#     image: {{ .Values.KUBEAPI.containers.image }}:{{ .Values.KUBEAPI.containers.tag }}
#     command:
#     - kube-apiserver
#     - --advertise-address=127.0.0.1
#     - --allow-privileged=true
#     - --authorization-mode=Node,RBAC
#     - --client-ca-file=/etc/kubernetes/pki/Kubernetes_CA.pem
#     - --enable-admission-plugins=NodeRestriction
#     - --enable-bootstrap-token-auth=true
#     - --etcd-cafile=/etc/kubernetes/pki/ETCD_CA.pem
#     - --etcd-certfile=/etc/kubernetes/pki/kube-apiserver-client-etcd.pem
#     - --etcd-keyfile=/etc/kubernetes/pki/kube-apiserver-client-etcd.key
#     - --encryption-provider-config=/etc/kubernetes/pki/encryption-config.yaml
#     - --etcd-servers={{ .Values.ID }}-svc-etcd
#     - --kubelet-client-certificate=/etc/kubernetes/pki/kubernetes.pem
#     - --kubelet-client-key=/etc/kubernetes/pki/kubernetes.key
#     - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
#     - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem
#     - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
#     - --requestheader-allowed-names=front-proxy-client
#     - --requestheader-client-ca-file=/etc/kubernetes/pki/front_proxy_CA.pem
#     - --requestheader-extra-headers-prefix=X-Remote-Extra-
#     - --requestheader-group-headers=X-Remote-Group
#     - --requestheader-username-headers=X-Remote-User
#     - --secure-port=6443
#     - --service-account-issuer=https://{{ .Values.ID }}-svc-kube-apiserver:6443
#     - --service-account-key-file=/etc/kubernetes/pki/service-accounts.pem
#     - --service-account-signing-key-file=/etc/kubernetes/pki/service-accounts.key
#     # - --service-cluster-ip-range=
#     - --tls-cert-file=/etc/kubernetes/pki/kubernetes.pem
#     - --tls-private-key-file=/etc/kubernetes/pki/kubernetes.key
#     imagePullPolicy: IfNotPresent
#     livenessProbe:
#       failureThreshold: 8
#       httpGet:
#         host: 127.0.0.1
#         path: /livez
#         port: 6443
#         scheme: HTTPS
#       initialDelaySeconds: 10
#       periodSeconds: 10
#       timeoutSeconds: 15
#     readinessProbe:
#       failureThreshold: 3
#       httpGet:
#         host: 127.0.0.1
#         path: /readyz
#         port: 6443
#         scheme: HTTPS
#       periodSeconds: 1
#       timeoutSeconds: 15
#     resources:
#       requests:
#         cpu: 250m
#     startupProbe:
#       failureThreshold: 24
#       httpGet:
#         host: 127.0.0.1
#         path: /livez
#         port: 6443
#         scheme: HTTPS
#       initialDelaySeconds: 10
#       periodSeconds: 10
#       timeoutSeconds: 15
#     volumeMounts:
#     - mountPath: /etc/ssl/certs
#       name: ca-certs
#       readOnly: true
#     - mountPath: /etc/ca-certificates
#       name: etc-ca-certificates
#       readOnly: true
#     - mountPath: /etc/kubernetes/pki
#       name: k8s-certs
#       readOnly: true
#     - mountPath: /usr/local/share/ca-certificates
#       name: usr-local-share-ca-certificates
#       readOnly: true
#     - mountPath: /usr/share/ca-certificates
#       name: usr-share-ca-certificates
#       readOnly: true
#   hostNetwork: true
#   priority: 2000001000
#   priorityClassName: system-node-critical
#   securityContext:
#     seccompProfile:
#       type: RuntimeDefault
#   volumes:
#   - hostPath:
#       path: /etc/ssl/certs
#       type: DirectoryOrCreate
#     name: ca-certs
#   - hostPath:
#       path: /etc/ca-certificates
#       type: DirectoryOrCreate
#     name: etc-ca-certificates
#   - hostPath:
#       path: /etc/kubernetes/pki
#       type: DirectoryOrCreate
#     name: k8s-certs
#   - hostPath:
#       path: /usr/local/share/ca-certificates
#       type: DirectoryOrCreate
#     name: usr-local-share-ca-certificates
#   - hostPath:
#       path: /usr/share/ca-certificates
#       type: DirectoryOrCreate
#     name: usr-share-ca-certificates
